<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Anysdk | Eddy's Blog]]></title>
  <link href="http://eddy2015.github.io//blog/categories/anysdk/atom.xml" rel="self"/>
  <link href="http://eddy2015.github.io//"/>
  <updated>2016-06-23T19:45:04+08:00</updated>
  <id>http://eddy2015.github.io//</id>
  <author>
    <name><![CDATA[Eddy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocosCreator 集成 AnySDK 教程]]></title>
    <link href="http://eddy2015.github.io//blog/2016/06/22/ccc-plus-anysdk/"/>
    <updated>2016-06-22T08:39:30+08:00</updated>
    <id>http://eddy2015.github.io//blog/2016/06/22/ccc-plus-anysdk</id>
    <content type="html"><![CDATA[<p>本文主要介绍怎么在 CocosCreator 项目中集成 AnySDK 。<!--more--></p>

<h2>本人开发环境</h2>

<hr />

<p>CocosCreator 1.1.1, AnySDK 2.1.2, AnySDK_Framework_JS_Android_2.1.2, MacOS 10.10.3</p>

<h2>Android 平台集成 AnySDK 详细步骤</h2>

<hr />

<p>由于本人使用 git 对项目进行版本控制管理，所以下列步骤中会有一些与 git 相关的操作。如果你没有使用 git，那么你可以直接忽略下列步骤中与 git 相关的操作。</p>

<h3>获取 AnySDK Framework</h3>

<p>安装 AnySDK 客户端，然后在 AnySDK 客户端的【安妮市场】【分类】【框架】中找到 JS(Android) 框架并下载。如下图：
<img src="http://moefq.com/images/2016/06/22/f25635beee3f69c5224a0db5da811e64.png" alt="f25635beee3f69c5224a0db5da811e64.png" /></p>

<p>下载完成后打开 JS(Android) 框架文件夹即可看到 <code>AnySDKFiles/Store/Frameworks/AnySDK_Framework_JS_Android_2.1.2/AnySDK_Framework_JS(Android)/</code> 这样的目录。如下图：
<img src="http://moefq.com/images/2016/06/22/c53ec646e60c26cea4b0a1b11a5e6457.png" alt="c53ec646e60c26cea4b0a1b11a5e6457.png" /></p>

<p>下文统一使用 <code>AnySDK_Framework_JS(Android)</code> 指代 AnySDK Framework 文件目录。</p>

<h3>构建并编译 CocosCreator 项目</h3>

<p>下文使用 <code>your-proj</code> 指代你的 CocosCreator 项目路径。</p>

<h4>修改项目中的 gitignore 文件。</h4>

<p>删除 your-proj/.gitignore 文件中以下路径：</p>

<pre><code>build/
</code></pre>

<p>在 your-proj/.gitignore 文件中添加以下路径：</p>

<pre><code>build/jsb-default/src/
build/jsb-default/res/
build/jsb-default/publish/
build/jsb-default/simulator/

build/jsb-default/frameworks/runtime-src/proj.android/bin/
build/jsb-default/frameworks/runtime-src/proj.android/gen/
build/jsb-default/frameworks/runtime-src/proj.android/obj/
build/jsb-default/frameworks/runtime-src/proj.android/assets/

build/jsb-default/frameworks/cocos2d-x/cocos/platform/android/java/bin/
build/jsb-default/frameworks/cocos2d-x/cocos/platform/android/java/gen/
</code></pre>

<h4>构建发布 Android 平台</h4>

<p>使用 CocosCreator 打开项目，点击 【项目】【构建发布】，<strong>发布平台选择 “Android”， 模板选择 “default”</strong>。然后点击 “构建”按钮 对项目进行构建。构建完毕会在 your-proj 目录下生成一个 <code>build/jsb-default/</code> 目录。</p>

<p>构建完成后，点击 “编译”按钮 对项目进行编译，编译过程大概20分钟左右。编译完成后，安装编译生成的 apk 到手机上查看是否运行正常。</p>

<p>如果在构建和编译过程中出现错误，请参考 CocosCreator 官方的<a href="http://www.cocos.com/docs/creator/publish/index.html">跨平台发布游戏文档</a>。</p>

<p>注意：该步骤中的编译操作并不是必须的，只是为了保证你的编译发布 Android 平台相关开发环境已经配置完成。这样在集成 AnySDK 的出现错误的时候，就可以排除开发环境配置相关的问题了。</p>

<h3>获取 anysdk jsb 绑定文件</h3>

<h4>添加 anysdk jsb 文件</h4>

<p>在 build/jsb-default/frameworks/cocos2d-x/ 目录下新建 <code>anysdk</code> 文件夹，然后拷贝 AnySDK_Framework_JS(Android)/ 目录下的 <code>src</code> 文件夹到新建的 anysdk 文件夹中。</p>

<h4>修改 build-cfg.json 文件</h4>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/build-cfg.json 文件中添加：</p>

<pre><code>{
    "from": "../../cocos2d-x/anysdk/src",
    "to": ""
}
</code></pre>

<p>如下图，<strong>注意：不要遗漏了添加代码前面分隔的逗号 “,”。</strong>
<img src="http://moefq.com/images/2016/06/22/1f49aec5017613daee5937b2b0459084.png" alt="1f49aec5017613daee5937b2b0459084.png" /></p>

<h4>修改 jsb.js 文件</h4>

<p>在 build/jsb-default/frameworks/cocos2d-x/cocos/scripting/js-bindings/script/jsb.js 文件中添加：</p>

<pre><code>if  (jsb.fileUtils.isFileExist('jsb_anysdk_constants.js') || jsb.fileUtils.isFileExist('jsb_anysdk_constants.jsc')) {
    if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) {
        require('jsb_anysdk_constants.js');
    }
}

if (jsb.fileUtils.isFileExist('jsb_anysdk.js') || jsb.fileUtils.isFileExist('jsb_anysdk.jsc')) {
    if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) {
        require('jsb_anysdk.js');
    }
}
</code></pre>

<p>如下图
<img src="http://moefq.com/images/2016/06/22/429e4831912ce5493a1d90614612d16f.png" alt="429e4831912ce5493a1d90614612d16f.png" /></p>

<h3>拷贝anysdk framework stl库</h3>

<h4>添加 protocols 文件</h4>

<p>首先，查看所接入项目的 build/jsb-default/frameworks/runtime-src/proj.android/jni/application.mk 文件第一行找到 stl 库类型设置。 如下：</p>

<pre><code>APP_STL := gnustl_static
</code></pre>

<p>然后，进入所接入项目的 build/jsb-default/frameworks/runtime-src/proj.android 目录，新建 <code>protocols</code> 文件夹。根据上面查看到的stl类型，选取 AnySDK_Framework_JS(Android)/framework/protocols_gnustl_static/ 库，然后将该目录下的 <code>android</code> 和 <code>include</code> 文件夹拷贝到 protocols 目录下。</p>

<h4>添加 libPluginProtocol.jar 文件</h4>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/ 目录下新建 <code>libs</code> 文件夹，然后将 build/jsb-default/frameworks/runtime-src/proj.android/protocols/android 目录下的 libPluginProtocol.jar 文件移到 libs 目录下。</p>

<h4>添加 res 文件</h4>

<p>将 AnySDK_Framework_JS(Android)/framework/protocols_gnustl_static/ 目录下的 <code>res</code> 文件夹，拷贝到 build/jsb-default/frameworks/runtime-src/proj.android/ 目录下，<strong>注意选择合并，避免文件覆盖</strong>。</p>

<h3>添加 Classes 文件</h3>

<p>将 AnySDK_Framework_JS(Android)/3.10及以上/ 目录下所有文件，拷贝到 build/jsb-default/frameworks/runtime-src/Classes 目录下。</p>

<p>由于 CocosCreator 1.1.1 版本的 jsb 和 1.0 版本的 jsb 有所区别，所以 <code>jsb_anysdk_protocols_auto.cpp</code> 文件需要进行相关的修改。由于改动的地方较多，在这就不一一列出了。请到下面的地址下载或复制：
<a href="https://github.com/eddy2015/anysdk-files-for-ccc/blob/master/jsb_anysdk_protocols_auto.cpp">jsb_anysdk_protocols_auto.cpp</a> 文件，并替换原来的文件。</p>

<h3>修改 AppDelegate.cpp 文件</h3>

<p>在 build/jsb-default/frameworks/runtime-src/Classes/AppDelegate.cpp 文件中添加：</p>

<pre><code>#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
#include "jsb_anysdk_basic_conversions.h"
#include "jsb_anysdk_protocols_auto.hpp"
#include "manualanysdkbindings.hpp"
#endif
</code></pre>

<pre><code>#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    sc-&gt;addRegisterCallback(register_all_anysdk_framework);
    sc-&gt;addRegisterCallback(register_all_anysdk_manual);
#endif
</code></pre>

<p>如下图
<img src="http://moefq.com/images/2016/06/22/a34d1eef630b77357fd7b0da8a0eee8d.png" alt="a34d1eef630b77357fd7b0da8a0eee8d.png" /></p>

<h3>修改 Android.mk 文件</h3>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/jni/Android.mk 文件中添加：</p>

<pre><code>$(call import-add-path,$(LOCAL_PATH)/../)
</code></pre>

<pre><code>../../Classes/jsb/jsb_creator_auto.cpp \
../../Classes/jsb_anysdk_basic_conversions.cpp \
../../Classes/jsb_anysdk_protocols_auto.cpp \
../../Classes/manualanysdkbindings.cpp
</code></pre>

<pre><code>LOCAL_WHOLE_STATIC_LIBRARIES := PluginProtocolStatic
</code></pre>

<pre><code>$(call import-module, protocols/android)
</code></pre>

<p>如下图，<strong>注意：记得在 <code>../../Classes/AppDelegate.cpp
</code> 后添加 “\”。</strong>
<img src="http://moefq.com/images/2016/06/22/dbd9228816f437d2545a5ae9a4888fe0.png" alt="dbd9228816f437d2545a5ae9a4888fe0.png" /></p>

<h3>修改 main.cpp 文件</h3>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/jni/hellojavascript/main.cpp 文件中添加：</p>

<pre><code>#include "PluginJniHelper.h"
</code></pre>

<pre><code>using namespace anysdk::framework;
</code></pre>

<pre><code>JavaVM* vm;
env-&gt;GetJavaVM(&amp;vm);
PluginJniHelper::setJavaVM(vm);
</code></pre>

<p>如下图
<img src="http://moefq.com/images/2016/06/22/8cabdde9cc04010d4e2c4e298503dc38.png" alt="8cabdde9cc04010d4e2c4e298503dc38.png" /></p>

<h3>修改 AndroidManifest.xml 文件</h3>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/AndroidManifest.xml 文件中添加 AnySDK 所需要的权限：</p>

<pre><code>    &lt;!-- for anysdk start --&gt;
    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;
    &lt;uses-permission android:name="android.permission.RESTART_PACKAGES" /&gt;
    &lt;uses-permission android:name="android.permission.KILL_BACKGROUND_PROCESSES" /&gt;
    &lt;!-- for anysdk end --&gt;
</code></pre>

<p>如下图
<img src="http://moefq.com/images/2016/06/22/ff536e7787793ba702c09ae8cab9e0d8.png" alt="ff536e7787793ba702c09ae8cab9e0d8.png" /></p>

<h3>修改 AppActivity.java 文件</h3>

<p>在 build/jsb-default/frameworks/runtime-src/proj.android/src/org/cocos2dx/javascript/AppActivity.java 添加：</p>

<pre><code>import com.anysdk.framework.PluginWrapper;
import android.content.Intent; 
import android.os.Bundle;
</code></pre>

<pre><code>PluginWrapper.init(this); // for plugins
</code></pre>

<pre><code>@Override
protected void onDestroy() {
    PluginWrapper.onDestroy();
    super.onDestroy();
}

@Override
protected void onPause() {
    PluginWrapper.onPause();
    super.onPause();
}

@Override
protected void onResume() {
    PluginWrapper.onResume();
    super.onResume();
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    PluginWrapper.onActivityResult(requestCode, resultCode, data);
    super.onActivityResult(requestCode, resultCode, data);
}

@Override
protected void onNewIntent(Intent intent) {
    PluginWrapper.onNewIntent(intent);
    super.onNewIntent(intent);
}

@Override
protected void onStop() {
    PluginWrapper.onStop();
    super.onStop();
}

@Override
protected void onRestart() {
    PluginWrapper.onRestart();
    super.onRestart();
}
</code></pre>

<p>如下图
<img src="http://moefq.com/images/2016/06/22/751912d2799f9251349eacd49e049c4c.png" alt="751912d2799f9251349eacd49e049c4c.png" /></p>

<h2>在项目中使用AnySDK</h2>

<hr />

<h3>获取 AnySDK 参数</h3>

<p>打开 AnySDK 客户端，点击 【打包工具】【游戏列表】【添加游戏】来在 AnySDK 客户端添加游戏项目。添加成功后，就可以获取到使用 AnySDK 需要的参数：appKey、appSecret、privateKey。</p>

<h3>在项目中添加 AnySDK 功能代码</h3>

<p>下面给出了我在使用 AnySDK 用过的相关功能代码供大家参考。AnySDK 具体用法请参考<a href="http://docs.anysdk.com/JsAPI">官方的客户端接入（JS）文档</a>。</p>

<pre><code>// 初始化AnySDk
initAnySDK: function () {
    cc.log("WelcomeScreen.initAnySDK()");
    if (cc.sys.isMobile) {
        //注意：这里appKey, appSecret, privateKey，要替换成自己打包工具里面的值(登录打包工具，游戏管理界面上显示的那三个参数)。
        var appKey = "23BEE66E-48A1-9BF0-CF4A-4DA25FF54082";
        var appSecret = "b3d0c6f406c1f7d097f2036f445589b4";
        var privateKey = "FC69F26761B6C3BEDFCDA8A2D248CC45";
        var oauthLoginServer = "http://oauth.anysdk.com/api/OauthLoginDemo/Login.php";
        var agent = anysdk.agentManager;
        //init
        agent.init(appKey, appSecret, privateKey, oauthLoginServer);
        //load
        agent.loadAllPlugins();

        // 开启统计
        cc.log("analytics_plugin.startSession();");
        var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin();
        if (analytics_plugin) {
            analytics_plugin.startSession();
        }

        // 开启推送服务
        cc.log("push_plugin.startPush();");
        var push_plugin = anysdk.agentManager.getPushPlugin();
        if (push_plugin) {
            push_plugin.startPush();
        }
    }
},

// 显示横幅广告
showBannerAd: function () {
    cc.log("WelcomeScreen.showBannerAd()");
    if (cc.sys.isMobile) {
        var ads_plugin = anysdk.agentManager.getAdsPlugin(); 
        if (ads_plugin.isAdTypeSupported(anysdk.AdsType.AD_TYPE_BANNER)) {
            ads_plugin.showAds(anysdk.AdsType.AD_TYPE_BANNER);
        } 
    }
},

// 显示插屏广告
showFullScreenAd: function () {
    cc.log("showFullScreenAd()");
    if (cc.sys.isMobile) {
        var ads_plugin = anysdk.agentManager.getAdsPlugin(); 
        if (ads_plugin.isAdTypeSupported(anysdk.AdsType.AD_TYPE_FULLSCREEN)) {
            ads_plugin.showAds(anysdk.AdsType.AD_TYPE_FULLSCREEN);
        } 
    }
},

// 统计事件
logEvent: function () {
    cc.log("logEvent()");
    if (cc.sys.isMobile) {
        var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin();
        if (analytics_plugin) {
            analytics_plugin.logEvent("click_logevent_btn")
        }
    }
},

// 退出游戏
onExitBtnClicked: function () {
    cc.log("onExitBtnClicked()");

    // 关闭统计
    cc.log("analytics_plugin.stopSession();");
    if (cc.sys.isMobile) {
        var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin();
        if (analytics_plugin) {
            analytics_plugin.stopSession();
        }
        // 在游戏结束或者适当的时候，调用unloadAllPlugins来卸载SDK插件
        anysdk.agentManager.unloadAllPlugins();
    } 

    cc.director.end();// 退出游戏
}
</code></pre>

<p>在项目中添加了 AnySDK 相关功能代码后，使用 CocosCreator 编译出 Android APK 母包。</p>

<h3>生成渠道包</h3>

<p>在 AnySDK 客户端配置好游戏的渠道、SDK等参数，然后使用上一步骤编译出来的 Android APK 母包生成集成了 SDK 的渠道包。</p>

<p>在这里就不详细说明 AnySDK 客户端的使用了，详情请参考 <a href="http://docs.anysdk.com/PackageTool">AnySDK 的官方文档</a>。</p>

<h2>如果快速集成 AnySDK</h2>

<hr />

<p>我在 GitHub 上面分享了一个便于在 CocosCreator 项目的 Android 平台快速集成 AnySDK 的项目：<a href="https://github.com/eddy2015/anysdk-files-for-ccc">anysdk-files-for-ccc</a> 。具体使用方法请参考该项目的 README.md 文件，这里就不详细说明了。</p>

<h2>总结</h2>

<hr />

<p>本文主要讲解了如何在 CocosCreator 项目的 Android 平台集成 AnySDK ，并提供了一个快速集成方法。ios 平台请参考 AnySDK 的官方文档自行尝试。</p>

<p>本文出自 <a href="http://eddy2015.github.io/">Eddy&rsquo;s Blog</a> 转载请注明出处：<a href="http://eddy2015.github.io/blog/2016/06/22/ccc-plus-anysdk/">http://eddy2015.github.io/blog/2016/06/22/ccc-plus-anysdk/</a></p>
]]></content>
  </entry>
  
</feed>
